name: Build

on:
  push:
    branches:
      - main
      - pdm
    tags:
      - v*.*.*
  pull_request:

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@1.60.0
        with:
          components: clippy,rustfmt

      - name: Set up Rust cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/pre-commit
            target/
          key: checks-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: checks-cargo-

      - name: Check pre-commit hook
        uses: pre-commit/action@v3.0.0

      - name: Setup 3rd party dependencies
        uses: ./.github/actions/setup-dependencies

      - name: Poetry install
        run: poetry install

      - name: Check - pyright
        run: PYRIGHT_PYTHON_FORCE_VERSION=1.1.188 poetry run pyright .

  sdist:
    name: Build - sdist
    needs:
      - checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: python -m pip install --upgrade pip poetry
      - name: Build sdist
        run: poetry build --format=sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist

  linux-wheels:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          #- target: aarch64-unknown-linux-gnu
          #  arch: arm64
    name: Build wheel - ${{ matrix.target }}
    needs:
      - checks
    runs-on: ubuntu-latest
    env:
      image: ghcr.io/onekey-sec/unblob-builder-${{ matrix.target }}
    # permissions:
    #   packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: linux-cargo-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check cached build image
        run: |
          TAG=${{hashFiles(format('Dockerfile.build.{0}', matrix.target)) }}
          echo tag=$TAG >> $GITHUB_ENV
      - name: Install dependencies
        uses: extractions/setup-crate@v1
        with:
          owner: casey
          name: just
          version: 1.9.0
      - run: just wheel ${{ matrix.target }}
      - run: docker push $image:$tag
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.target }}
          path: dist

  tests:
    name: Run tests
    needs:
      - linux-wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup 3rd party dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Git LFS
        uses: ./.github/actions/setup-git-lfs

      - uses: actions/download-artifact@v3
        with:
          name: wheels-x86_64-unknown-linux-gnu
          path: dist

      - name: Install Unblob from wheel
        run: poetry run pip install dist/*.whl

      - name: Run pytest
        run: poetry run pytest -vvv

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - sdist
      - linux-wheels
      - tests
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist
      - run: mv dist/*/* dist
      - name: Publish to PyPI
        run: poetry publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{secrets.POETRY_PYPI_TOKEN_PYPI}}
