[tool.pdm]
[tool.pdm.dev-dependencies]
test = [
"pytest~=6.2.4",
"pyright~=0.0.12",
"pre-commit~=2.15.0",
"pytest-cov~=3.0.0",
"ruff~=0.0.259",
]
doc = [
  "mkdocs-material==8.5.10",
  "mkdocstrings~=0.19.1",
  "pillow~=9.4.0",
  "cairosvg~=2.7.0",
  "mkdocstrings-python~=0.8.3",
]

[project]
name = "unblob"
version = "23.4.24"
description = "Extract files from any kind of container formats"
authors = [
    {name = "ONEKEY", email = "support@onekey.com"},
]
dependencies = [
    "click~=8.1.3",
    "dissect.cstruct~=2.0",
    "attrs~=22.2",
    "structlog~=21.2",
    "arpy~=2.2",
    "rarfile~=4.0",
    "ubi-reader~=0.8.5",
    "python-lzo~=1.14",
    "plotext>=4.2.0,<6.0",
    "pluggy~=1.0",
    "python-magic~=0.4.27",
    "pyperscan~=0.2.0",
    "lark~=1.1.2",
    "lz4~=4.0",
    "lief~=0.12.3",
    "jefferson~=0.4.2",
    "cryptography>=37.0.1,<40.0",
    "treelib~=1.6.1",
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}

[project.scripts]
unblob = "unblob.cli:main"

[build-system]
requires = ["setuptools", "setuptools_rust", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
namespaces = false

[tool.ruff]
target-version = "py38"

select = [
  "A",      # flake8-builtins
  "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "C90",    # mccabe
  "C4",     # flake8-comprehensions
  "COM818", # flake8-commas; trailing-comma-on-bare-tuple
  "D",      # pydocstyle
  "E",      # pycodestyle (errors)
  "F",      # pyflakes
  "FBT",    # flake8-boolean-trap
  "G",      # flake8-logging-format
  "I",      # isort
  "ISC",    # flake8-implicit-str-concats
  "N",      # pep8-naming
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "RET",    # flake8-return
  "RUF",    # ruff's own lints
  "RSE",    # flake8-raise
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "SLF",    # flake8-self
  "T10",    # flake8-debugger
  "T20",    # flake8-print
  "TCH",    # flake8-type-checking
  "TRY",    # tryceratops
  "UP",     # pyupgrade
  "W",      # pycodestyle (warnings)
]

ignore = [
  "B027",    # empty-method-without-abstract-decorator: It is okay to have empty methods in abstract classes
  "D1",      # undocumented-*:                          We are not documenting every public symbol
  "D203",    # one-blank-line-before-class:             D211 (no-blank-line-before-class) is used instead
  "D213",    # multi-line-summary-second-line:          D212 (multi-line-summary-first-line) is used instead
  "E501",    # line-too-long:                           Let black handle line length violations
  "N818",    # error-suffix-on-exception-name:          Exception names can be meaningful without smurfs
  "PLC0414", # useless-import-alias:                    Enable explicitly re-exporting public symbols
  "PLR09",   # too-many-{arguments,branches,...}:       We do not want to impose hard limits
  "S101",    # assert:                                  Enable usage of asserts
  "TRY003",  # raise-vanilla-args:                      We are adding contextual information in exception messages
  "TRY400",  # error-instead-of-exception:              It is okay to log without backtrace in except blocks
]

# Do not remove unused imports automatically in __init__.py files
ignore-init-module-imports = true

[tool.ruff.per-file-ignores]
"tests/*" = [
  "FBT001",  # boolean-positional-arg-in-function-definition: allowed in `pytest.param()`
  "FBT003",  # boolean-positional-value-in-function-call:     allowed test parameters
]

[tool.ruff.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true  # code like `dict(a=1, b=2)` is allowed

[tool.ruff.mccabe]
max-complexity = 8

[tool.ruff.pylint]
allow-magic-value-types = [
  "bytes",
  "int",   # bunch of ad-hoc bitmask values
  "str",
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.pytest.ini_options]
addopts = "--cov=unblob --cov=tests --cov-branch --cov-fail-under=90"
norecursedirs = """
  *.egg
  *_extract
  .*
  dist
  build
  target
  tests/integration
"""

[tool.vulture]
paths = ["unblob/", "vulture_whitelist.py" ]
exclude = ["unblob/_py/", "unblob/testing.py"]

[tool.pyright]
exclude = ["build"]